
<html>
<head>
<script type="text/javascript" src='/socket.io/socket.io.js'></script>
<script type="text/javascript" src='/javascripts/player.js'></script>
<script type="text/javascript" src="/javascripts/glge-compiled-min.js"></script> 
<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"></script> 
<link type="text/css" rel="stylesheet" href="/stylesheets/style.css"></link>
</head>
<body oncontextmenu="return false;">
	<div id="charselect" >
		<div id="names">
		 Identify: <input type="text" name="fname" id="nameb" /><br />
		 <button type="button"  onclick="submit()">Enter</button> <br />
		</div>
		<div id="Playerson">
		 <ul id="online">
		  <h3>Who's Online</h3>
		 </ul>
		</div>
	</div>
	<div id="gameframe">
		<canvas id="canvas1"></canvas>
	</div>
	


<script>
  var serverip = '10.0.0.7';
  var entities = [];
  var entity;
  var selfuid;
  var selfname;
  var mouseovercanvas;
  var aimvector = GLGE.Vec3(0,0,0);
  var upvector = GLGE.Vec3(0,-1,0);

  
  //webgl start
  var canvas = document.getElementById('canvas1');  
  var gameScene;
  var doc = new GLGE.Document();
  var gameRenderer=new GLGE.Renderer(document.getElementById('canvas1'));
  var mouse=new GLGE.MouseInput(document.getElementById('canvas1'));
  var keys=new GLGE.KeyInput();
    doc.load("./images/glge.xml");

	doc.onLoad=function(){

	//create the renderer
		
		gameScene=new GLGE.Scene();
		gameScene=doc.getElement("mainscene");
		gameRenderer.setScene(gameScene);
		

		function render(){
			updateEntities();

			updatecamera();
			checkkeys();
			mouselook();
			gameRenderer.render();
			
	
		}	

		setInterval(render,20);

		function updatecamera(){
			var w;
			var h;
			var me = entityByUid(selfuid);
			w = canvas.width = window.innerWidth;
			h = canvas.height = window.innerHeight;
			gameScene.camera.setAspect(w/h);
			gameScene.camera.setLocX(me.x);
			gameScene.camera.setLocY(me.y);
		}
		function updateEntities(){
			var i;
			for (i = 0; i < entities.length; i++) {
				entities[i].entobj.setLocX(entities[i].x);
				entities[i].entobj.setLocY(entities[i].y);
				entities[i].entobj.setRotZ(entities[i].rot);
			}
		}
	
			
	}

// Controls
  function mouselook(){
	if(mouseovercanvas){
      var mousepos=mouse.getMousePosition();
	  var mousevector = new GLGE.Vec3(mousepos.x, mousepos.y, 0);
      var midvector = new GLGE.Vec3(window.innerWidth/2, window.innerHeight/2, 0);
      var preaimvector = GLGE.subVec3(mousevector,midvector);
      aimvector[0] = preaimvector[0];
      aimvector[1] = -preaimvector[1];
      var rotangle = Math.atan2(aimvector[1], aimvector[0]);
	  socket.emit('rotPlayer', {rot: rotangle, uid: selfuid});

    }
  }
  function checkkeys(){
	if(keys.isKeyPressed(GLGE.KI_M)) {}
	if(keys.isKeyPressed(GLGE.KI_W)) {socket.emit('movePlayer',{dy: 0.1, dx: 0.0, uid: selfuid });}
	if(keys.isKeyPressed(GLGE.KI_S)) {socket.emit('movePlayer',{dy: -0.1, dx: 0.0, uid: selfuid });}
	if(keys.isKeyPressed(GLGE.KI_A)) {socket.emit('movePlayer',{dy: 0.0, dx: -0.1, uid: selfuid });}
	if(keys.isKeyPressed(GLGE.KI_D)) {socket.emit('movePlayer',{dy: 0.0, dx: 0.1, uid: selfuid });}
  }
  document.onselectstart = function(){ return false; }
  document.getElementById("canvas1").onmouseover=function(e){mouseovercanvas=true;}
  document.getElementById("canvas1").onmouseout=function(e){mouseovercanvas=false;}
  document.onmousedown=function(e){
    var mousepos=mouse.getMousePosition();
    if(e.button==0 && mousepos.x && mousepos.y){
	  socket.emit('fire', {aim: aimvector, uid: selfuid });
    }
  }
  function addEntity(entity){
	entity.entobj = new GLGE.Object(entity.uid);
	initEntity(entity, entity.type);
	gameScene.addObject(entity.entobj);
	entities.push(entity);

  }
  
  function initEntity(entity, type){
    if(type == 'player'){
	  entity.entobj.setMesh(doc.getElement('cube'));
	  entity.entobj.setMaterial(doc.getElement('cubeMat'));
	  entity.entobj.setScale(0.4);
	  entity.entobj.setLocZ(-10);
	  entity.entobj.uid = entity.uid;
	}
	if(type == 'bullet'){
	  entity.entobj.setMesh(doc.getElement('sphere'));
	  entity.entobj.setMaterial(doc.getElement('sphereMat'));
	  entity.entobj.setScale(0.1);
	  entity.entobj.setLocZ(-10);
	  entity.entobj.uid = entity.uid;
	}
  }
  function removeEntity(entity){
	gameScene.removeChild(entity.entobj);
    entities.splice(entities.indexOf(entity), 1);
	
  }
	
	//Sockets Start
	
  var socket = io.connect(serverip, {port: 3000, transports: ["websocket"]});
  
  socket.on('news', function (data) {
    console.log(data);

  });
  socket.on('newplayer', function(data){
  	li = document.createElement('li');
  	li.innerHTML =  data.user;
  	li.setAttribute('id',data.id);
  	document.getElementById('online').appendChild(li);
  });
  socket.on('removeplayer', function(data){
  	li = document.getElementById(data.id);
  	document.getElementById('online').removeChild(li);
  	var ent = entityById(data.id);
  	removeEntity(ent);	
  });
  socket.on('entityUpdate', function(data){
  	
    var ent = entityByUid(data.uid);
      if (!ent){
    	addEntity(data);
      }
	  
	ent.x = data.x;
	ent.y = data.y;
	ent.rot = data.rot;			

		
  });
  socket.on('selfid', function(data){
	selfuid = data.uid;
  });
  socket.on('removeEnt', function(data){
    var ent = entityByUid(data.uid);
	if (!ent){return};
	console.log(ent);
	removeEntity(ent);
  });

  function submit(){
    socket.emit('onNewPlayer',{player: {user: document.getElementById('nameb').value}});
    var names = document.getElementById('names');
    li = document.createElement('li');
//	hpp = document.createElement('p');
	li.id = 'selfname';
    li.innerHTML = document.getElementById('nameb').value;
    document.getElementById('online').appendChild(li);
//	document.getElementById('selfname').appendChild(p);
    document.getElementById('charselect').removeChild(names);

    };
    

// Find entitiy by uid
function entityByUid(uid) {
	var i;
	for (i = 0; i < entities.length; i++) {
		if (entities[i].uid == uid)
			return entities[i];
	};
	
	return false;
};
// Find entitiy by id
function entityById(id) {
	var i;
	for (i = 0; i < entities.length; i++) {
		if (entities[i].id == id)
			return entities[i];
	};
	
	return false;
};


// Find player by ID
function playerById(id) {
	var i;
	for (i = 0; i < players.length; i++) {
		if (players[i].id == id)
			return players[i];
	};
	
	return false;
};

</script>

</body>
</html>
